<?php

namespace App\Controller\Admin;

use App\Entity\Vehicle;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateTimeField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\MoneyField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class VehicleCrudController extends AbstractCrudController
{
    public const UPLOAD_VEHICLES_BASE_PATH = 'upload/images/vehicles-illustration';
    public const UPLOAD_VEHICLES_DIR = "public/upload/images/vehicles-illustration";

    public function __construct(private readonly UserRepository $userRepository)
    {
    }

    public static function getEntityFqcn(): string
    {
        return Vehicle::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setNumberFormat('%.2d')
            ->setPageTitle('index', 'Liste Des Véhicules')
            ; // TODO: Change the autogenerated stub
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->update(Crud::PAGE_INDEX, Action::NEW, function (Action $action) {
                return $action
                    ->setLabel('Nouvelle Annonce')
                    ->setIcon('fas fa-car')
                    ->addCssClass('text-capitalize');
            })
            ->update(Crud::PAGE_INDEX, Action::EDIT, function(Action $action) {
                return $action
                    ->setLabel('Mettre à jour Une Annonce')
                    ->setIcon('fas fa-wrench')
                    ->addCssClass('text-capitalize');
            })
            ->update(Crud::PAGE_INDEX, Action::DELETE, function (Action $action) {
                return $action
                    ->setLabel('Supprimer une annonce')
                    ->setIcon('fas fa-trash-alt')
                    ->addCssClass('text-capitalize');
            })
            ;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            IdField::new('id')->hideOnForm(),
            TextField::new('brand', "Marque"),
            TextField::new('model', 'Model'),
            TextField::new('slug', 'Slug')->onlyOnIndex(),
            AssociationField::new('vehicleType', 'Type de Moteur'),
            ImageField::new('image', "Photo du véhicule")
                ->setBasePath(self::UPLOAD_VEHICLES_BASE_PATH)
                ->setUploadDir(self::UPLOAD_VEHICLES_DIR)
                ->setSortable(false),
            TextEditorField::new('description', "Description"),
            NumberField::new('price', 'Prix'),
            IntegerField::new('year', 'Année'),
            NumberField::new('milliage', "Kilométrage"),
            AssociationField::new('user', 'Ajouté par')->hideOnForm(),
            DateTimeField::new('createdAt')->hideOnForm(),

        ];
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        if (!$entityInstance instanceof Vehicle) return;
//        $entityInstance->setCreatedAt(new \DateTimeImmutable());
        $entityInstance->setUser($this->getUser());
        parent::persistEntity($entityManager, $entityInstance);
    }
}
